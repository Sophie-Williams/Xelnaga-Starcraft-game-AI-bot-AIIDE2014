#include "AiurModule.h"
#include "../src/Util.h"
using namespace BWAPI;

void AiurModule::onStart()
{
	this->showManagerAssignments=false;
	if (Broodwar->isReplay()) return;

	Broodwar->setTextSize(0);
	Broodwar->sendText("gg hf");

	// Thanks for the trick, Gabriel!
	// Broodwar->setLatCom(false);

	// Enable some cheat flags
	Broodwar->enableFlag(Flag::UserInput);
	// Broodwar->enableFlag(Flag::CompleteMapInformation);

	BWTA::readMap();
	BWTA::analyze();
	this->analyzed=true;
	this->buildManager       = new BuildManager(&this->arbitrator);
	this->techManager        = new TechManager(&this->arbitrator);
	this->upgradeManager     = new UpgradeManager(&this->arbitrator);
	this->spyManager				 = new SpyManager(&this->arbitrator);
	this->workerManager      = new WorkerManager(&this->arbitrator);
	this->supplyManager      = new SupplyManager();
	this->spendManager			 = new SpendManager();
	this->baseManager        = new BaseManager();
	this->buildOrderManager  = new BuildOrderManager(this->buildManager,this->techManager,this->upgradeManager,this->workerManager,this->supplyManager);
	this->defenseManager     = new DefenseManager(&this->arbitrator);
	this->underAttackManager = new UnderAttackManager(&this->arbitrator);
	this->armyManager				 = new ArmyManager(&this->arbitrator);
	this->informationManager = InformationManager::create();
	this->scoutManager       = new ScoutManager(&this->arbitrator, this->informationManager);
	this->borderManager      = BorderManager::create();
	this->unitGroupManager	 = UnitGroupManager::create();
	this->moodManager				 = new MoodManager();
	this->enhancedUI         = new EnhancedUI();

	this->buildOrderManager->enableDependencyResolver();

	this->underAttackManager->setDefenseManager(this->defenseManager);
	this->underAttackManager->setBaseManager(this->baseManager);

	this->supplyManager->setBuildManager(this->buildManager);
	this->supplyManager->setBuildOrderManager(this->buildOrderManager);

	this->spendManager->setBuildManager(this->buildManager);
	this->spendManager->setBuildOrderManager(this->buildOrderManager);
	this->spendManager->setMoodManager(this->moodManager);
	this->spendManager->setArmyManager(this->armyManager);

	this->techManager->setBuildingPlacer(this->buildManager->getBuildingPlacer());

	this->upgradeManager->setBuildingPlacer(this->buildManager->getBuildingPlacer());

	this->workerManager->setBaseManager(this->baseManager);
	this->workerManager->setBuildOrderManager(this->buildOrderManager);

	this->baseManager->setBuildOrderManager(this->buildOrderManager);
	this->baseManager->setBorderManager(this->borderManager);

	this->defenseManager->setBorderManager(this->borderManager);
	this->defenseManager->setBaseManager(this->baseManager);
	this->defenseManager->setInformationManager(this->informationManager);

	this->spyManager->setInformationManager(this->informationManager);
	this->spyManager->setBuildOrderManager(this->buildOrderManager);

	this->armyManager->setDefenseManager(this->defenseManager);
	this->armyManager->setInformationManager(this->informationManager);
	this->armyManager->setBaseManager(this->baseManager);

	this->moodManager->setInformationManager(this->informationManager);

	lastFrameExpand = 0;
	lastScout = 0;
	debugMode = false;
	cleaningPath = false;
	destinationMineralSpotted = false;

	BWAPI::Race race = Broodwar->self()->getRace();
	BWAPI::Race enemyRace = Broodwar->enemy()->getRace();
	BWAPI::UnitType workerType=race.getWorker();

	home=BWTA::getStartLocation(Broodwar->self());
	closest = NULL;

	std::string s1 = race.getName();
	std::string s2 = enemyRace.getName();

	this->buildManager->setDebugMode(true);
	this->scoutManager->setDebugMode(false);
	this->spyManager->setDebugMode(false);
	this->buildOrderManager->setDebugMode(false);

	//make the basic production facility

	if(enemyRace == Races::Terran) // 10/12 Gate
	{
		this->buildOrderManager->build(30,UnitTypes::Protoss_Probe,80);
		this->buildOrderManager->build(1,UnitTypes::Protoss_Gateway,80);
		this->buildOrderManager->build(1,UnitTypes::Protoss_Zealot,80);
		this->buildOrderManager->build(2,UnitTypes::Protoss_Gateway,80);
		this->buildOrderManager->build(2,UnitTypes::Protoss_Zealot,80);
	}

	if(enemyRace == Races::Zerg) // 10/10 Gate
	{
		this->buildOrderManager->build(10,UnitTypes::Protoss_Probe,82);
		this->buildOrderManager->build(2,UnitTypes::Protoss_Gateway,60);
		this->buildOrderManager->build(12,UnitTypes::Protoss_Probe,82);
		this->buildOrderManager->build(2,UnitTypes::Protoss_Zealot,55);
		this->buildOrderManager->build(13,UnitTypes::Protoss_Probe,82);
		this->buildOrderManager->build(4,UnitTypes::Protoss_Zealot,55);
	}

	if(enemyRace == Races::Protoss) // 9/10 Gate
	{
		this->buildOrderManager->build(9,UnitTypes::Protoss_Probe,82);
		this->buildOrderManager->build(1,UnitTypes::Protoss_Gateway,60);
		this->buildOrderManager->build(10,UnitTypes::Protoss_Probe,82);
		this->buildOrderManager->build(2,UnitTypes::Protoss_Gateway,60);
		this->buildOrderManager->build(13,UnitTypes::Protoss_Probe,82);
		this->buildOrderManager->build(3,UnitTypes::Protoss_Zealot,55);
	}

	this->workerManager->enableAutoBuild();
	this->workerManager->setAutoBuildPriority(100);
	this->baseManager->setRefineryBuildPriority(30);
}

AiurModule::~AiurModule()
{
	delete this->buildManager;
	delete this->techManager;
	delete this->upgradeManager;
	delete this->scoutManager;
	delete this->spyManager;
	delete this->workerManager;
	delete this->supplyManager;
	delete this->spendManager;
	delete this->buildOrderManager;
	delete this->baseManager;
	delete this->defenseManager;
	delete this->underAttackManager;
	delete this->armyManager;
	delete this->moodManager;
	InformationManager::destroy();
	BorderManager::destroy();
	UnitGroupManager::destroy();
	delete this->enhancedUI;
}
void AiurModule::onEnd(bool isWinner)
{
	log("onEnd(%d)\n",isWinner);
}
void AiurModule::onFrame()
{
	if (Broodwar->isReplay()) return;
	if (!this->analyzed) return;

	this->buildManager->update();
	this->buildOrderManager->update();
	this->baseManager->update();
	this->workerManager->update();
	this->techManager->update();
	this->upgradeManager->update();
	this->supplyManager->update();
	this->moodManager->update();
	this->spendManager->update();
	this->scoutManager->update();
	if (!this->informationManager->getEnemyBases().empty() && Broodwar->getFrameCount() > 3000)
	  {
			this->defenseManager->update();

	    if (!this->spyManager->isInitialized())
	      this->spyManager->initialize();
	    this->spyManager->update();
	  }
	this->enhancedUI->update();
	this->borderManager->update();
	this->underAttackManager->update();
	this->armyManager->update();
	this->arbitrator.update();

	if ((Broodwar->mapName().compare(1,11,"Destination")  == 0) && !destinationMineralSpotted)
	{
		destinationMineralSpotted = true;
		Position *p;

		//Low position
		if (BWAPI::Broodwar->self()->getStartLocation().y() > 50)
		{
			p = new Position(1312,3856);
		}
		//High position
		else
		{
			p = new Position(1760,208);
		}
		for each (BWAPI::Unit *u in Broodwar->getAllUnits())
		{
			if ((u->getType() == BWAPI::UnitTypes::Resource_Mineral_Field) && (u->getPosition().x() == p->x()) && (u->getPosition().y() == p->y()))
			{
				workerManager->setDestinationMineral(u);
				break;
			}
		}
		delete p;
	}

	if (debugMode)
	{
		Broodwar->drawTextScreen(420,30,"DPS: %.2f", armyManager->myDPS());
		Broodwar->drawTextScreen(420,40,"Zealots:        %3d%% / %3d%%", (int)(spendManager->getUnitCount()->zealotRatio*100), (int)(spendManager->getUnitCount()->zealotIdealRatio*100));
		Broodwar->drawTextScreen(420,50,"Dragoons:      %3d%% / %3d%%", (int)(spendManager->getUnitCount()->dragoonRatio*100), (int)(spendManager->getUnitCount()->dragoonIdealRatio*100));
		Broodwar->drawTextScreen(420,60,"Corsairs:       %3d%% / %3d%%", (int)(spendManager->getUnitCount()->corsairRatio*100), (int)(spendManager->getUnitCount()->corsairIdealRatio*100));
		Broodwar->drawTextScreen(420,70,"Dark Templars: %3d%% / %3d%%", (int)(spendManager->getUnitCount()->darkTemplarRatio*100), (int)(spendManager->getUnitCount()->darkTemplarIdealRatio*100));
	}

	if ((Broodwar->self()->allUnitCount(UnitTypes::Protoss_Probe) < 5))
		this->buildOrderManager->buildAdditional(1,UnitTypes::Protoss_Probe,90);

	if (Broodwar->self()->allUnitCount(UnitTypes::Protoss_Probe) == 10)
	{		
		this->scoutManager->setScoutCount(1);
	}

	std::set<Unit*> units=Broodwar->self()->getUnits();
	if (this->showManagerAssignments)
	{
		for(std::set<Unit*>::iterator i=units.begin();i!=units.end();i++)
		{
			if (this->arbitrator.hasBid(*i))
			{
				int x=(*i)->getPosition().x();
				int y=(*i)->getPosition().y();
				std::list< std::pair< Arbitrator::Controller<BWAPI::Unit*,double>*, double> > bids=this->arbitrator.getAllBidders(*i);
				int y_off=0;
				bool first = false;
				const char activeColor = '\x07', inactiveColor = '\x16';
				char color = activeColor;
				for(std::list< std::pair< Arbitrator::Controller<BWAPI::Unit*,double>*, double> >::iterator j=bids.begin();j!=bids.end();j++)
				{
					Broodwar->drawTextMap(x,y+y_off,"%c%s: %d",color,j->first->getShortName().c_str(),(int)j->second);
					y_off+=15;
					color = inactiveColor;
				}
			}
		}
	}
}

void AiurModule::onUnitDestroy(BWAPI::Unit* unit)
{
	if (Broodwar->isReplay()) return;
	this->arbitrator.onRemoveObject(unit);
	this->buildManager->onRemoveUnit(unit);
	this->techManager->onRemoveUnit(unit);
	this->upgradeManager->onRemoveUnit(unit);
	this->workerManager->onRemoveUnit(unit);
	this->scoutManager->onRemoveUnit(unit);
	this->spyManager->onRemoveUnit(unit);
	this->defenseManager->onRemoveUnit(unit);
	this->informationManager->onUnitDestroy(unit);
	this->baseManager->onRemoveUnit(unit);
	this->underAttackManager->onRemoveUnit(unit);
	this->armyManager->onRemoveUnit(unit);
}

void AiurModule::onUnitDiscover(BWAPI::Unit* unit)
{
	if (Broodwar->isReplay()) return;
	this->informationManager->onUnitDiscover(unit);
	this->unitGroupManager->onUnitDiscover(unit);
}
void AiurModule::onUnitEvade(BWAPI::Unit* unit)
{
	if (Broodwar->isReplay()) return;
	this->informationManager->onUnitEvade(unit);
	this->unitGroupManager->onUnitEvade(unit);
}

void AiurModule::onUnitMorph(BWAPI::Unit* unit)
{
	if (Broodwar->isReplay()) return;
	this->unitGroupManager->onUnitMorph(unit);
}
void AiurModule::onUnitRenegade(BWAPI::Unit* unit)
{
	if (Broodwar->isReplay()) return;
	this->unitGroupManager->onUnitRenegade(unit);
}

void AiurModule::onSendText(std::string text)
{
	if (Broodwar->isReplay())
	{
		Broodwar->sendText("%s",text.c_str());
		return;
	}
	UnitType type=UnitTypes::getUnitType(text);
	if (text=="debug")
	{
		if (this->showManagerAssignments==false)
		{
			this->showManagerAssignments=true;
			this->buildOrderManager->setDebugMode(true);
			this->scoutManager->setDebugMode(true);
			this->spyManager->setDebugMode(true);
			debugMode = true;
		}
		else
		{
			this->showManagerAssignments=false;
			this->buildOrderManager->setDebugMode(false);
			this->scoutManager->setDebugMode(false);
			this->spyManager->setDebugMode(false);
			debugMode = false;
		}
		Broodwar->printf("%s",text.c_str());
		return;
	}
	if (text=="expand")
	{
		this->baseManager->expand();
		Broodwar->printf("%s",text.c_str());
		return;
	}
	if (type!=UnitTypes::Unknown)
	{
		this->buildOrderManager->buildAdditional(1,type,300);
	}
	else
	{
		TechType type=TechTypes::getTechType(text);
		if (type!=TechTypes::Unknown)
		{
			this->techManager->research(type);
		}
		else
		{
			UpgradeType type=UpgradeTypes::getUpgradeType(text);
			if (type!=UpgradeTypes::Unknown)
			{
				this->upgradeManager->upgrade(type);
			}
			else
				Broodwar->printf("You typed '%s'!",text.c_str());
		}
	}
	Broodwar->sendText("%s",text.c_str());
}
